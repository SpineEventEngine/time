/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
buildscript {
    repositories {
        jcenter()

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = repos.spine }

        // Spine snapshots repository.
        maven { url = repos.spineSnapshots }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath deps.build.guava
        classpath(deps.build.gradlePlugins.protobuf) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
    }
    
    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

configurations {
    // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
    runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
}

apply from: "$rootDir/config/gradle/dependencies.gradle"

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: spineProtobufPluginId

apply from: deps.scripts.generateDescriptorSet

apply from: deps.scripts.testArtifacts

dependencies {
    compile group: 'io.spine', name: 'spine-base', version: spineBaseVersion

    testCompile group: 'io.spine', name: 'spine-testutil-base', version: spineBaseVersion
    testCompile project(path: ':testutil-time')
}

modelCompiler {
    generateValidatingBuilders = true
}

