/*
 * Copyright 2018, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import groovy.time.TimeCategory

buildscript {

    // Applying from `ext.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: 'ext.gradle'

    ext {
        googleMavenCentralMirror = 'https://maven-central.storage.googleapis.com'
        spineRepository = 'http://maven.teamdev.com/repository/spine'
        spineSnapshotsRepository = 'http://maven.teamdev.com/repository/spine-snapshots'
    }

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
        classpath(group: 'com.google.protobuf', name: 'protobuf-gradle-plugin',
                version: protobufGradlePluginVerison) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }

        classpath group: 'io.spine.tools',
                  name: 'spine-model-compiler',
                  version: spineModelCompilerVersion
        
        classpath group: 'io.spine.tools',
                  name: 'spine-codestyle-checker',
                  version: spineToolsVersion
        
        classpath group: 'io.spine.tools',
                  name: 'gcs-plugin',
                  version: spineToolsVersion
    }
    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

apply from: 'ext.gradle'

ext {
    spineCodestyleCheckerId = 'io.spine.tools.spine-codestyle-checker'
    spineGcsPlugin = 'io.spine.tools.gcs-plugin'
    spineJacocoScript = "${rootDir}/scripts/jacoco.gradle"

    credentialsPropertyFile = 'credentials.properties'
    publishPlugin = "$rootDir/scripts/publish.gradle"
    projectsToPublish = ["time"]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'


    group = 'io.spine'
    // Use the same version numbering for the Spine Base library.
    version = spineVersion
}


subprojects {

    project.ext {
        protobufDependency = "com.google.protobuf:protoc:${protobufVersion}"
        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        testArtifactsScript = "$rootDir/scripts/test-artifacts.gradle"
        generateDescriptorSetScript = "$rootDir/scripts/generate-descriptor-set.gradle"
        filterInternalJavadocsScript = "$rootDir/scripts/no-internal-javadoc.gradle"
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'java'
    apply plugin: spineCodestyleCheckerId
    apply plugin: 'maven-publish'

    // Verifies code style.
    // The parameters are same for any kind of verification:
    //
    //      - "threshold" - is a number of code style violations to consider check passed.
    //      - "reportType" - report type if a check is not passed. Can be either "error" or "warn".
    //              * "warn" - the violations are logged to the build report.
    //              * "error" - build will fail and its report will contain the violations.
    //
    //      For more details please see io.spine.tools.codestyle.CodestyleCheckerPlugin
    codestyleChecker {

        // Javadoc @link/@linkplain format checker.
        //
        // Finds and reports FQNs used in links in the wrong format.
        javadocLinkChecker {
            threshold = 0
            reportType = "warn"
        }

        // Right margin line checker.
        //
        // Finds and reports about the lines of a code with length above threshold.
        rightMarginWrappingChecker {
            maxTextWidth = 100
        }
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }
        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: findBugsVersion

        // As a Library, we provide logging facade API, not specific logger bindings.
        // Target apps are free to use any binding they need.
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4JVersion

        compile group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion

        // Use jdk14 bindings for test purposes only.
        testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4JVersion
        testCompile(group: 'junit', name: 'junit', version: jUnitVersion) {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
        testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion
    }

    sourceSets {
        main {
            proto.srcDirs = ["$sourcesRootDir/main/proto"]
            java.srcDirs = [generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir]
            resources.srcDirs = ["$sourcesRootDir/main/resources", "$generatedRootDir/main/resources"]
        }
        test {
            proto.srcDirs = ["$sourcesRootDir/test/proto"]
            java.srcDirs = [generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir]
            resources.srcDirs = ["$sourcesRootDir/test/resources", "$generatedRootDir/test/resources"]
        }
    }

    /* Uncomment this block if you need to display console output during the Gradle build.
    test {
        testLogging {
            // Make sure output from standard out or error is shown in Gradle output.
            showStandardStreams = true

            // Or we use events method:
            // events 'standard_out', 'standard_error'

            // Or set property events:
            events = ['standard_out', 'standard_error']

            // Instead of string values we can
            // use enum values:
            // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
            //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
        }
    }
    */

    protobuf {
        generatedFilesBaseDir = generatedRootDir
        protoc {
            artifact = protobufDependency
        }

        // The below code removes deprecation annotations from the code generated by
        // Protobuf compiler.
        // See details at the link below:
        //    https://github.com/google/protobuf/issues/2054
        generateProtoTasks {
            all().each { final task ->
                task.descriptorSetOptions.includeSourceInfo = true
                task.doLast {
                    ant.replaceregexp(
                            match:'@java.lang.Deprecated|@deprecated',
                            replace:'',
                            flags:'g',
                            byline:true
                    ) {
                        fileset(dir: "${protobuf.generatedFilesBaseDir}/main/java")

                        final generatedTests = "${protobuf.generatedFilesBaseDir}/test/java"
                        if (new File(generatedTests).exists()) {
                            fileset(dir: generatedTests)
                        }
                    }
                }
            }
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from ("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }

    apply from: filterInternalJavadocsScript

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            generatedSourceDirs += file(generatedSpineDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }
}

// IDEA project configuration.
idea {
    project {
        ipr {
            beforeMerged { final project ->
                project.modulePaths.clear()
            }
            withXml { final provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

// Aggregated coverage report across all subprojects.
apply from: spineJacocoScript

apply from: publishPlugin

apply plugin: spineGcsPlugin

cleanGCS {
    final Properties properties = new Properties()
    final File gcsProperties = project.file("${rootDir}/config/gcs.properties")
    properties.load(gcsProperties.newDataInputStream())

    authKeyPath = "gcs-auth-key.json"
    bucketName = properties.getProperty("artifacts.bucket")
    targetFolder = properties.getProperty("artifacts.folder")
    threshold = TimeCategory.getDays(10)
}
